-- Original copy of the data.
SELECT *
FROM maryland_crime_data.md_crime_data;

-- Before analysis, always create a copy of the data.
-- This is a temporary staging table contatining some more appropriate names for the original table.
CREATE TABLE maryland_crime_data.maryland_temp_staging (
    JURISDICTION VARCHAR(225), 
    YEAR VARCHAR(225), 
    POPULATION VARCHAR(225), 
    MURDER VARCHAR(225), 
    RAPE VARCHAR(225), 
    ROBBERY VARCHAR(225), 
    AGG_ASSAULT VARCHAR(225), 
    BnE VARCHAR(225), 
    LARCENY_THEFT VARCHAR(225), 
    MV_THEFT VARCHAR(225), 
    GRAND_TOTAL VARCHAR(225), 
    PERCENT_CHANGE VARCHAR(225), 
    VIOLENT_CRIME_TOTAL VARCHAR(225), 
    VIOLENT_CRIME_PERCENT VARCHAR(225), 
    VIOLENT_CRIME_PERCENT_CHANGE VARCHAR(225), 
    PROPERTY_CRIME_TOTALS VARCHAR(225), 
    PROPERTY_CRIME_PERCENT VARCHAR(225), 
    PROPERTY_CRIME_PERCENT_CHANGE VARCHAR(225), 
    OVERALL_CRIME_RATE_PER_100000_PEOPLE VARCHAR(225), 
    OVERALL_PERCENT_CHANGE_PER_100000_PEOPLE VARCHAR(225), 
    VIOLENT_CRIME_RATE_PER_100000_PEOPLE VARCHAR(225), 
    VIOLENT_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE VARCHAR(225), 
    PROPERTY_CRIME_RATE_PER_100000_PEOPLE VARCHAR(225), 
    PROPERTY_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE VARCHAR(225), 
    MURDER_PER_100000_PEOPLE VARCHAR(225), 
    RAPE_PER_100000_PEOPLE VARCHAR(225), 
    ROBBERY_PER_100000_PEOPLE VARCHAR(225), 
    AGG_ASSAULT_PER_100000_PEOPLE VARCHAR(225), 
    BnE_PER_100000_PEOPLE VARCHAR(225), 
    LARCENY_THEFT_PER_100000_PEOPLE VARCHAR(225), 
    MV_THEFT_PER_100000_PEOPLE VARCHAR(225), 
    MURDER_RATE_PERCENT_CHANGE_PER_100000_PEOPLE VARCHAR(225), 
    RAPE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE VARCHAR(225), 
    ROBBERY_RATE_PERCENT_CHANGE_PER_100000_PEOPLE VARCHAR(225), 
    AGG_ASSAULT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE VARCHAR(225), 
    BnE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE VARCHAR(225), 
    LARCENY_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE VARCHAR(225), 
    MV_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE VARCHAR(225)
);

-- Copy data from original table into temporary staging table.
INSERT maryland_crime_data.maryland_temp_staging
SELECT *
FROM maryland_crime_data.md_crime_data;

-- In case a reboot is neccesary, drop the temporary staging table.
DROP TABLE maryland_crime_data.maryland_temp_staging;

SELECT *
FROM maryland_crime_data.maryland_temp_staging;

-- CLEAN DATA --

-- General cleaning of data done here
UPDATE maryland_crime_data.maryland_temp_staging
SET JURISDICTION = TRIM(JURISDICTION);

-- Check for any general duplicates [No duplicates found so no need to remove any data].
WITH CTE AS (
	SELECT 
		*,
        ROW_NUMBER() OVER (PARTITION BY JURISDICTION, YEAR, POPULATION, MURDER, RAPE, ROBBERY, AGG_ASSAULT, BnE, LARCENY_THEFT, MV_THEFT, GRAND_TOTAL, PERCENT_CHANGE, VIOLENT_CRIME_TOTAL, VIOLENT_CRIME_PERCENT, VIOLENT_CRIME_PERCENT_CHANGE, PROPERTY_CRIME_TOTALS, PROPERTY_CRIME_PERCENT, PROPERTY_CRIME_PERCENT_CHANGE, OVERALL_CRIME_RATE_PER_100000_PEOPLE, OVERALL_PERCENT_CHANGE_PER_100000_PEOPLE, VIOLENT_CRIME_RATE_PER_100000_PEOPLE, VIOLENT_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE, PROPERTY_CRIME_RATE_PER_100000_PEOPLE, PROPERTY_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE, MURDER_PER_100000_PEOPLE, RAPE_PER_100000_PEOPLE, ROBBERY_PER_100000_PEOPLE, AGG_ASSAULT_PER_100000_PEOPLE, BnE_PER_100000_PEOPLE, LARCENY_THEFT_PER_100000_PEOPLE, MV_THEFT_PER_100000_PEOPLE, MURDER_RATE_PERCENT_CHANGE_PER_100000_PEOPLE, RAPE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE, ROBBERY_RATE_PERCENT_CHANGE_PER_100000_PEOPLE, AGG_ASSAULT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE, BnE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE, LARCENY_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE, MV_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE) AS "duplicates"
    FROM maryland_crime_data.maryland_temp_staging
)
SELECT *
FROM CTE 
WHERE duplicates = 2;

-- Change empty cells to NULL.
UPDATE maryland_crime_data.maryland_temp_staging
SET 
    PERCENT_CHANGE = CASE WHEN PERCENT_CHANGE = '' THEN NULL ELSE PERCENT_CHANGE END,
    VIOLENT_CRIME_TOTAL = CASE WHEN VIOLENT_CRIME_TOTAL = '' THEN NULL ELSE VIOLENT_CRIME_TOTAL END,
    VIOLENT_CRIME_PERCENT = CASE WHEN VIOLENT_CRIME_PERCENT = '' THEN NULL ELSE VIOLENT_CRIME_PERCENT END,
    VIOLENT_CRIME_PERCENT_CHANGE = CASE WHEN VIOLENT_CRIME_PERCENT_CHANGE = '' THEN NULL ELSE VIOLENT_CRIME_PERCENT_CHANGE END,
    PROPERTY_CRIME_TOTALS = CASE WHEN PROPERTY_CRIME_TOTALS = '' THEN NULL ELSE PROPERTY_CRIME_TOTALS END,
    PROPERTY_CRIME_PERCENT = CASE WHEN PROPERTY_CRIME_PERCENT = '' THEN NULL ELSE PROPERTY_CRIME_PERCENT END,
    PROPERTY_CRIME_PERCENT_CHANGE = CASE WHEN PROPERTY_CRIME_PERCENT_CHANGE = '' THEN NULL ELSE PROPERTY_CRIME_PERCENT_CHANGE END,
    OVERALL_CRIME_RATE_PER_100000_PEOPLE = CASE WHEN OVERALL_CRIME_RATE_PER_100000_PEOPLE = '' THEN NULL ELSE OVERALL_CRIME_RATE_PER_100000_PEOPLE END,
    OVERALL_PERCENT_CHANGE_PER_100000_PEOPLE = CASE WHEN OVERALL_PERCENT_CHANGE_PER_100000_PEOPLE = '' THEN NULL ELSE OVERALL_PERCENT_CHANGE_PER_100000_PEOPLE END,
    VIOLENT_CRIME_RATE_PER_100000_PEOPLE = CASE WHEN VIOLENT_CRIME_RATE_PER_100000_PEOPLE = '' THEN NULL ELSE VIOLENT_CRIME_RATE_PER_100000_PEOPLE END,
    VIOLENT_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = CASE WHEN VIOLENT_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = '' THEN NULL ELSE VIOLENT_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE END,
    PROPERTY_CRIME_RATE_PER_100000_PEOPLE = CASE WHEN PROPERTY_CRIME_RATE_PER_100000_PEOPLE = '' THEN NULL ELSE PROPERTY_CRIME_RATE_PER_100000_PEOPLE END,
    PROPERTY_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = CASE WHEN PROPERTY_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = '' THEN NULL ELSE PROPERTY_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE END,
    MURDER_PER_100000_PEOPLE = CASE WHEN MURDER_PER_100000_PEOPLE = '' THEN NULL ELSE MURDER_PER_100000_PEOPLE END,
    RAPE_PER_100000_PEOPLE = CASE WHEN RAPE_PER_100000_PEOPLE = '' THEN NULL ELSE RAPE_PER_100000_PEOPLE END,
    ROBBERY_PER_100000_PEOPLE = CASE WHEN ROBBERY_PER_100000_PEOPLE = '' THEN NULL ELSE ROBBERY_PER_100000_PEOPLE END,
    AGG_ASSAULT_PER_100000_PEOPLE = CASE WHEN AGG_ASSAULT_PER_100000_PEOPLE = '' THEN NULL ELSE AGG_ASSAULT_PER_100000_PEOPLE END,
    BnE_PER_100000_PEOPLE = CASE WHEN BnE_PER_100000_PEOPLE = '' THEN NULL ELSE BnE_PER_100000_PEOPLE END,
    LARCENY_THEFT_PER_100000_PEOPLE = CASE WHEN LARCENY_THEFT_PER_100000_PEOPLE = '' THEN NULL ELSE LARCENY_THEFT_PER_100000_PEOPLE END,
    MV_THEFT_PER_100000_PEOPLE = CASE WHEN MV_THEFT_PER_100000_PEOPLE = '' THEN NULL ELSE MV_THEFT_PER_100000_PEOPLE END,
    MURDER_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = CASE WHEN MURDER_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = '' THEN NULL ELSE MURDER_RATE_PERCENT_CHANGE_PER_100000_PEOPLE END,
    RAPE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = CASE WHEN RAPE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = '' THEN NULL ELSE RAPE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE END,
    ROBBERY_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = CASE WHEN ROBBERY_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = '' THEN NULL ELSE ROBBERY_RATE_PERCENT_CHANGE_PER_100000_PEOPLE END,
    AGG_ASSAULT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = CASE WHEN AGG_ASSAULT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = '' THEN NULL ELSE AGG_ASSAULT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE END,
    BnE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = CASE WHEN BnE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = '' THEN NULL ELSE BnE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE END,
    LARCENY_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = CASE WHEN LARCENY_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = '' THEN NULL ELSE LARCENY_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE END,
    MV_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = CASE WHEN MV_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE = '' THEN NULL ELSE MV_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE END;


-- Create a new staging table with appropriate types for the columns.
CREATE TABLE maryland_crime_data.maryland_staging (
    JURISDICTION VARCHAR(225), 
    YEAR INTEGER, 
    POPULATION INTEGER, 
    MURDER INTEGER, 
    RAPE INTEGER, 
    ROBBERY INTEGER, 
    AGG_ASSAULT INTEGER, 
    BnE INTEGER, 
    LARCENY_THEFT INTEGER, 
    MV_THEFT INTEGER, 
    GRAND_TOTAL INTEGER, 
    PERCENT_CHANGE FLOAT, 
    VIOLENT_CRIME_TOTAL FLOAT, 
    VIOLENT_CRIME_PERCENT FLOAT, 
    VIOLENT_CRIME_PERCENT_CHANGE FLOAT, 
    PROPERTY_CRIME_TOTALS FLOAT, 
    PROPERTY_CRIME_PERCENT FLOAT, 
    PROPERTY_CRIME_PERCENT_CHANGE FLOAT, 
    OVERALL_CRIME_RATE_PER_100000_PEOPLE FLOAT, 
    OVERALL_PERCENT_CHANGE_PER_100000_PEOPLE FLOAT, 
    VIOLENT_CRIME_RATE_PER_100000_PEOPLE FLOAT, 
    VIOLENT_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE FLOAT, 
    PROPERTY_CRIME_RATE_PER_100000_PEOPLE FLOAT, 
    PROPERTY_CRIME_RATE_PERCENT_CHANGE_PER_100000_PEOPLE FLOAT, 
    MURDER_PER_100000_PEOPLE FLOAT, 
    RAPE_PER_100000_PEOPLE FLOAT, 
    ROBBERY_PER_100000_PEOPLE FLOAT, 
    AGG_ASSAULT_PER_100000_PEOPLE FLOAT, 
    BnE_PER_100000_PEOPLE FLOAT, 
    LARCENY_THEFT_PER_100000_PEOPLE FLOAT, 
    MV_THEFT_PER_100000_PEOPLE FLOAT, 
    MURDER_RATE_PERCENT_CHANGE_PER_100000_PEOPLE FLOAT, 
    RAPE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE FLOAT, 
    ROBBERY_RATE_PERCENT_CHANGE_PER_100000_PEOPLE FLOAT, 
    AGG_ASSAULT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE FLOAT, 
    BnE_RATE_PERCENT_CHANGE_PER_100000_PEOPLE FLOAT, 
    LARCENY_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE FLOAT, 
    MV_THEFT_RATE_PERCENT_CHANGE_PER_100000_PEOPLE FLOAT
);

INSERT maryland_crime_data.maryland_staging
SELECT *
FROM maryland_crime_data.maryland_temp_staging;

SELECT *
FROM maryland_crime_data.maryland_staging;


-- EXPLORATORY DATA ANALYSIS --

-- Projected crime rater per 100000 people of each jurisdiction per year. 
-- [How many crimes are projected to be commited by 100,000 people per jurisdiction on a yearly basis].
WITH CRIME_PER_100000_PER_JURISDICTION_PER_YEAR AS (
	SELECT 
		JURISDICTION,
        YEAR,
        ROUND((MURDER / POPULATION) * 100000, 2) AS MURDER_RATE_PER_100000,
        ROUND((RAPE / POPULATION) * 100000, 2) AS RAPE_RATE_PER_100000,
        ROUND((ROBBERY / POPULATION) * 100000, 2) AS ROBBERY_RATE_PER_100000,
        ROUND((AGG_ASSAULT / POPULATION) * 100000, 2) AS AGG_ASSAULT_RATE_PER_100000,
        ROUND((BnE / POPULATION) * 100000, 2) AS BnE_RATE_PER_100000,
        ROUND((LARCENY_THEFT / POPULATION) * 100000, 2) AS LARCENY_THEFT_RATE_PER_100000,
        ROUND((MV_THEFT / POPULATION) * 100000, 2) AS MV_THEFT_RATE_PER_100000,
        ROUND((GRAND_TOTAL / POPULATION) * 100000, 2) AS OVERALL_CRIME_RATE_PER_100000
    FROM Maryland_crime_data.maryland_staging
)
SELECT *
FROM CRIME_PER_100000_PER_JURISDICTION_PER_YEAR;

-- Average projected crime rate per 100000 people of each jurisdiction.
WITH AVERAGE_CRIME_PER_100000_PER_JURISDICTION AS (
	SELECT 
		JURISDICTION,
        ROUND(AVG((MURDER / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION), 2) AS AVERAGE_MURDER_RATE_PER_100000,
        ROUND(AVG((RAPE / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION), 2) AS AVERAGE_RAPE_RATE_PER_100000,
        ROUND(AVG((ROBBERY / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION), 2) AS AVERAGE_ROBBERY_RATE_PER_100000,
        ROUND(AVG((AGG_ASSAULT / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION), 2) AS AVERAGE_AGG_ASSAULT_RATE_PER_100000,
        ROUND(AVG((BnE / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION), 2) AS AVERAGE_BnE_RATE_PER_100000,
        ROUND(AVG((LARCENY_THEFT / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION), 2) AS AVERAGE_LARCENY_THEFT_RATE_PER_100000,
        ROUND(AVG((MV_THEFT / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION), 2) AS AVERAGE_MV_THEFT_RATE_PER_100000,
        ROUND(AVG((GRAND_TOTAL / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION), 2) AS AVERAGE_OVERALL_CRIME_RATE_PER_100000
    FROM Maryland_crime_data.maryland_staging
)
SELECT *
FROM AVERAGE_CRIME_PER_100000_PER_JURISDICTION;

-- Which type of crime is more frequent, violent or property per judistiction? Note that a crime can fall under both violent and property.
WITH crime_per_jurisdiction AS (
    SELECT DISTINCT
        JURISDICTION,
        SUM(MURDER) OVER (PARTITION BY JURISDICTION) AS TOTAL_MURDER,
        SUM(RAPE) OVER (PARTITION BY JURISDICTION) AS TOTAL_RAPE,
        SUM(ROBBERY) OVER (PARTITION BY JURISDICTION) AS TOTAL_ROBBERY,
        SUM(AGG_ASSAULT) OVER (PARTITION BY JURISDICTION) AS TOTAL_AGG_ASSAULT,
        SUM(BnE) OVER (PARTITION BY JURISDICTION) AS TOTAL_BnE,
        SUM(LARCENY_THEFT) OVER (PARTITION BY JURISDICTION) AS TOTAL_LARCENY_THEFT,
        SUM(MV_THEFT) OVER (PARTITION BY JURISDICTION) AS TOTAL_MV_THEFT,
        SUM(GRAND_TOTAL) OVER (PARTITION BY JURISDICTION) AS TOTAL_CRIME_PER_JURISDICTION
    FROM maryland_crime_data.maryland_staging
),
violent_property_count_per_jurdistiction AS (
	SELECT 
		JURISDICTION,
        -- Calculates the number of violent crime.
		SUM(TOTAL_MURDER + TOTAL_RAPE + TOTAL_ROBBERY + TOTAL_AGG_ASSAULT) OVER (PARTITION BY JURISDICTION) AS TOTAL_VIOLENT_CRIME,
        -- Calculates the number of property crime.
        SUM(TOTAL_ROBBERY + TOTAL_BnE + TOTAL_LARCENY_THEFT + TOTAL_MV_THEFT) OVER (PARTITION BY JURISDICTION) AS TOTAL_PROPERTY_CRIME
    FROM crime_per_jurisdiction
)
SELECT
	JURISDICTION,
    TOTAL_VIOLENT_CRIME,
    TOTAL_PROPERTY_CRIME,
	CASE
		WHEN TOTAL_VIOLENT_CRIME > TOTAL_PROPERTY_CRIME
        THEN 'VIOLENT CRIME'
        WHEN TOTAL_VIOLENT_CRIME < TOTAL_PROPERTY_CRIME
        THEN 'PROPERTY CRIME'
        ELSE 'EQUALLY PREVALENT'
	END AS MOST_COMMON_CRIME_TYPE
FROM violent_property_count_per_jurdistiction;

-- Which type of crime is more frequent, violent or property overall? Note that a crime can fall under both violent and property.
WITH crime_per_jurisdiction AS (
    SELECT DISTINCT
        JURISDICTION,
        SUM(MURDER) OVER (PARTITION BY JURISDICTION) AS TOTAL_MURDER,
        SUM(RAPE) OVER (PARTITION BY JURISDICTION) AS TOTAL_RAPE,
        SUM(ROBBERY) OVER (PARTITION BY JURISDICTION) AS TOTAL_ROBBERY,
        SUM(AGG_ASSAULT) OVER (PARTITION BY JURISDICTION) AS TOTAL_AGG_ASSAULT,
        SUM(BnE) OVER (PARTITION BY JURISDICTION) AS TOTAL_BnE,
        SUM(LARCENY_THEFT) OVER (PARTITION BY JURISDICTION) AS TOTAL_LARCENY_THEFT,
        SUM(MV_THEFT) OVER (PARTITION BY JURISDICTION) AS TOTAL_MV_THEFT,
        SUM(GRAND_TOTAL) OVER (PARTITION BY JURISDICTION) AS TOTAL_CRIME_PER_JURISDICTION
    FROM maryland_crime_data.maryland_staging
),
violent_property_count_per_jurdistiction AS (
	SELECT 
		JURISDICTION,
        -- Calculates the number of violent crime.
		SUM(TOTAL_MURDER + TOTAL_RAPE + TOTAL_ROBBERY + TOTAL_AGG_ASSAULT) OVER (PARTITION BY JURISDICTION) AS TOTAL_VIOLENT_CRIME,
        -- Calculates the number of property crime.
        SUM(TOTAL_ROBBERY + TOTAL_BnE + TOTAL_LARCENY_THEFT + TOTAL_MV_THEFT) OVER (PARTITION BY JURISDICTION) AS TOTAL_PROPERTY_CRIME
    FROM crime_per_jurisdiction
),
violent_property_count_overall AS (
	SELECT 
		-- Violent crime overall.
		SUM(TOTAL_VIOLENT_CRIME) AS TOTAL_VIOLENT_CRIME_OVERALL,
        -- Property crime overall.
        SUM(TOTAL_PROPERTY_CRIME) AS TOTAL_PROPERTY_CRIME_OVERALL
	FROM violent_property_count_per_jurdistiction
)
SELECT 
	*,
    CASE
		WHEN TOTAL_VIOLENT_CRIME_OVERALL > TOTAL_PROPERTY_CRIME_OVERALL
        THEN 'VIOLENT CRIME'
        WHEN TOTAL_VIOLENT_CRIME_OVERALL < TOTAL_PROPERTY_CRIME_OVERALL
        THEN 'PROPERTY CRIME'
        ELSE 'EQUALLY PREVALENT'
    END AS MOST_COMMON_CRIME_TYPE
FROM violent_property_count_overall;

-- What is the most and least common crime commited in each jurisdiction per year?
WITH highest_lowest_crime_rate AS (
    SELECT 
        JURISDICTION,
        YEAR,
        MURDER,
        RAPE,
        ROBBERY,
        AGG_ASSAULT,
        BnE,
        LARCENY_THEFT,
        MV_THEFT,
        MURDER / POPULATION AS MURDER_RATE,
        RAPE / POPULATION AS RAPE_RATE,
        ROBBERY / POPULATION AS ROBBERY_RATE,
        AGG_ASSAULT / POPULATION AS AGG_ASSAULT_RATE,
        BnE / POPULATION AS BnE_RATE,
        LARCENY_THEFT / POPULATION AS LARCENY_THEFT_RATE,
        MV_THEFT / POPULATION AS MV_THEFT_RATE,
        GREATEST(
            MURDER / POPULATION,
            RAPE / POPULATION,
            ROBBERY / POPULATION,
            AGG_ASSAULT / POPULATION,
            BnE / POPULATION,
            LARCENY_THEFT / POPULATION,
            MV_THEFT / POPULATION
        ) AS HIGHEST_CRIME_RATE,
        LEAST(
            MURDER / POPULATION,
            RAPE / POPULATION,
            ROBBERY / POPULATION,
            AGG_ASSAULT / POPULATION,
            BnE / POPULATION,
            LARCENY_THEFT / POPULATION,
            MV_THEFT / POPULATION
        ) AS LOWEST_CRIME_RATE
    FROM maryland_crime_data.maryland_staging
    ORDER BY JURISDICTION, YEAR
)
SELECT DISTINCT
    JURISDICTION,
    YEAR,
    CASE 
		-- Calculates the most common crime per jurisdiction.
        WHEN MURDER_RATE = HIGHEST_CRIME_RATE THEN 'MURDER'
        WHEN RAPE_RATE = HIGHEST_CRIME_RATE THEN 'RAPE'
        WHEN ROBBERY_RATE = HIGHEST_CRIME_RATE THEN 'ROBBERY'
        WHEN AGG_ASSAULT_RATE = HIGHEST_CRIME_RATE THEN 'AGG_ASSAULT'
        WHEN BnE_RATE = HIGHEST_CRIME_RATE THEN 'BnE'
        WHEN LARCENY_THEFT_RATE = HIGHEST_CRIME_RATE THEN 'LARCENY_THEFT'
        WHEN MV_THEFT_RATE = HIGHEST_CRIME_RATE THEN 'MV_THEFT'
        ELSE 'UNKNOWN'
    END AS MOST_COMMON_CRIME,
    CASE 
		-- Calculates the least common crime per jurisdiction.
        WHEN MURDER_RATE = LOWEST_CRIME_RATE THEN 'MURDER'
        WHEN RAPE_RATE = LOWEST_CRIME_RATE THEN 'RAPE'
        WHEN ROBBERY_RATE = LOWEST_CRIME_RATE THEN 'ROBBERY'
        WHEN AGG_ASSAULT_RATE = LOWEST_CRIME_RATE THEN 'AGG_ASSAULT'
        WHEN BnE_RATE = LOWEST_CRIME_RATE THEN 'BnE'
        WHEN LARCENY_THEFT_RATE = LOWEST_CRIME_RATE THEN 'LARCENY_THEFT'
        WHEN MV_THEFT_RATE = LOWEST_CRIME_RATE THEN 'MV_THEFT'
        ELSE 'UNKNOWN'
    END AS LEAST_COMMON_CRIME
FROM highest_lowest_crime_rate; 

-- Which jurisdiction experiences the most substancially big absolute fluctuations in crime rates per 100000?
WITH ABSOLUTE_ROC_PER_100000 AS (
    SELECT 
        JURISDICTION,
        POPULATION,
        YEAR,
        GRAND_TOTAL,
        ROUND((MURDER / POPULATION) * 100000 - LAG((MURDER / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION ORDER BY YEAR), 2) AS ROC_MURDER_RATE_PER_100000,
        ROUND((RAPE / POPULATION) * 100000 - LAG((RAPE / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION ORDER BY YEAR), 2) AS ROC_RAPE_RATE_PER_100000,
        ROUND((ROBBERY / POPULATION) * 100000 - LAG((ROBBERY / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION ORDER BY YEAR), 2) AS ROC_ROBBERY_RATE_PER_100000,
        ROUND((AGG_ASSAULT / POPULATION) * 100000 - LAG((AGG_ASSAULT / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION ORDER BY YEAR), 2) AS ROC_AGG_ASSAULT_RATE_PER_100000,
        ROUND((BnE / POPULATION) * 100000 - LAG((BnE / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION ORDER BY YEAR), 2) AS ROC_BnE_RATE_PER_100000,
        ROUND((LARCENY_THEFT / POPULATION) * 100000 - LAG((LARCENY_THEFT / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION ORDER BY YEAR), 2) AS ROC_LARCENY_THEFT_RATE_PER_100000,
        ROUND((MV_THEFT / POPULATION) * 100000 - LAG((MV_THEFT / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION ORDER BY YEAR), 2) AS ROC_MV_THEFT_RATE_PER_100000,
        ROUND((GRAND_TOTAL / POPULATION) * 100000 - LAG((GRAND_TOTAL / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION ORDER BY YEAR), 2) AS ROC_OVERALL_CRIME_RATE_PER_100000
    FROM Maryland_crime_data.maryland_staging
),
ABSOLUTE_FLUCTUATIONS AS (
	SELECT 
		JURISDICTION,
        GRAND_TOTAL
	FROM ABSOLUTE_ROC_PER_100000
	WHERE 
		ABS(ROC_MURDER_RATE_PER_100000) >= 5 OR 
		ABS(ROC_RAPE_RATE_PER_100000) >= 10 OR
		ABS(ROC_ROBBERY_RATE_PER_100000) >= 35 OR
		ABS(ROC_AGG_ASSAULT_RATE_PER_100000) >= 50 OR
		ABS(ROC_BnE_RATE_PER_100000) >= 100 OR
		ABS(ROC_LARCENY_THEFT_RATE_PER_100000) >= 95 OR
		ABS(ROC_MV_THEFT_RATE_PER_100000) >= 50 OR
		ABS(ROC_OVERALL_CRIME_RATE_PER_100000) >= 345
)
SELECT 
	JURISDICTION, 
    SUM(GRAND_TOTAL) AS TOTAL_CRIME, 
    COUNT(JURISDICTION) AS HIGH_ABSOLUTE_FULCTUATION_COUNT
FROM ABSOLUTE_FLUCTUATIONS
GROUP BY JURISDICTION
ORDER BY COUNT(JURISDICTION) DESC, JURISDICTION
LIMIT 5;

-- Which jurisdiction experiences the the largest substancially big absolute fluctuations in crime rates overall? 
WITH ABSOLUTE_ROC_PER_100000 AS (
    SELECT 
        JURISDICTION,
        POPULATION,
        YEAR,
        GRAND_TOTAL,
        ROUND((GRAND_TOTAL / POPULATION) * 100000 - LAG((GRAND_TOTAL / POPULATION) * 100000) OVER (PARTITION BY JURISDICTION ORDER BY YEAR), 2) AS ROC_OVERALL_CRIME_RATE_PER_100000
    FROM Maryland_crime_data.maryland_staging
),
CTE_TEMP AS (
	(SELECT 
		JURISDICTION,
		SUM(GRAND_TOTAL) AS TOTAL_CRIME, 
		MIN(ROC_OVERALL_CRIME_RATE_PER_100000) AS MIN_MAX_CRIME_RATE,
		1 AS SUB
	FROM ABSOLUTE_ROC_PER_100000
	GROUP BY JURISDICTION
	ORDER BY MIN(ROC_OVERALL_CRIME_RATE_PER_100000), JURISDICTION
	LIMIT 5)
	UNION ALL
	(SELECT
		JURISDICTION,
		SUM(GRAND_TOTAL) AS TOTAL_CRIME, 
		MAX(ROC_OVERALL_CRIME_RATE_PER_100000) AS MIN_MAX_CRIME_RATE,
		2 AS SUB
	FROM ABSOLUTE_ROC_PER_100000
	GROUP BY JURISDICTION
	ORDER BY MAX(ROC_OVERALL_CRIME_RATE_PER_100000) DESC, JURISDICTION
	LIMIT 5)
),
CTE AS (
	SELECT
		JURISDICTION,
		TOTAL_CRIME,
		MIN_MAX_CRIME_RATE
	FROM CTE_TEMP
    -- Ordered by most high and low first.
	ORDER BY ROW_NUMBER() OVER (PARTITION BY SUB), MIN_MAX_CRIME_RATE DESC
)
SELECT
	ROW_NUMBER() OVER () AS HIGHEST_AND_LOWEST_FLUCTUATION_RANK,
    JURISDICTION,
	TOTAL_CRIME,
	MIN_MAX_CRIME_RATE
FROM CTE;

-- Which jurisdiction experiences the most substancially big percentage fluctuations in crime rates per 100000?
WITH PERCENTAGE_ROC_PER_100000 AS (
    SELECT 
        JURISDICTION,
        POPULATION,
        YEAR,
        GRAND_TOTAL,
        LAG(RAPE) OVER (PARTITION BY JURISDICTION ORDER BY YEAR) AS PREV_YEAR_MURDER,
        RAPE,
        -- ROUND(((MURDER - LAG(MURDER) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) / LAG(MURDER) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) * 100, 2) AS PERCENTAGE_CHANGE_MURDER,
        -- ROUND(((RAPE - LAG(RAPE) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) / LAG(RAPE) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) * 100, 2) AS PERCENTAGE_CHANGE_RAPE,
        -- ROUND(((ROBBERY - LAG(ROBBERY) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) / LAG(ROBBERY) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) * 100, 2) AS PERCENTAGE_CHANGE_ROBBERY,
        -- ROUND(((AGG_ASSAULT - LAG(AGG_ASSAULT) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) / LAG(AGG_ASSAULT) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) * 100, 2) AS PERCENTAGE_CHANGE_AGG_ASSAULT,
        -- ROUND(((BnE - LAG(BnE) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) / LAG(BnE) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) * 100, 2) AS PERCENTAGE_CHANGE_BnE,
        -- ROUND(((LARCENY_THEFT - LAG(LARCENY_THEFT) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) / LAG(LARCENY_THEFT) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) * 100, 2) AS PERCENTAGE_CHANGE_LARCENY_THEFT,
        -- ROUND(((MV_THEFT - LAG(MV_THEFT) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) / LAG(MV_THEFT) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) * 100, 2) AS PERCENTAGE_CHANGE_MV_THEFT,
        ROUND(((GRAND_TOTAL - LAG(GRAND_TOTAL) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) / LAG(GRAND_TOTAL) OVER (PARTITION BY JURISDICTION ORDER BY YEAR)) * 100, 2) AS PERCENTAGE_CHANGE_GRAND_TOTAL
    FROM Maryland_crime_data.maryland_staging
),
PERCENTAGE_FLUCTUATIONS AS (
	SELECT 
		JURISDICTION,
        GRAND_TOTAL
	FROM PERCENTAGE_ROC_PER_100000
    WHERE
		PERCENTAGE_CHANGE_GRAND_TOTAL <> 0 AND
		-- Modify this a you will but we will go with the defualt of crime changing substancially overall.
		-- ABS(PERCENTAGE_CHANGE_MURDER) >= 100
        -- ABS(PERCENTAGE_CHANGE_RAPE) >= 100
        -- ABS(PERCENTAGE_CHANGE_ROBBERY) >= 50
        -- ABS(PERCENTAGE_CHANGE_AGG_ASSAULT) >= 20
        -- ABS(PERCENTAGE_CHANGE_BnE) >= 20
        -- ABS(PERCENTAGE_CHANGE_LARCENY_THEFT) >= 20
        -- ABS(PERCENTAGE_CHANGE_MV_THEFT) >= 25
        -- This boolean identifies cases where crime in a certain jurisdiction in a given year changes by 25%.
        (ABS(PERCENTAGE_CHANGE_GRAND_TOTAL) >= 25)
)
SELECT 
	JURISDICTION,
    SUM(GRAND_TOTAL) AS TOTAL_CRIME, 
    COUNT(JURISDICTION) AS HIGH_PERCENTAGE_FULCTUATION_COUNT
FROM PERCENTAGE_FLUCTUATIONS
GROUP BY JURISDICTION
ORDER BY COUNT(JURISDICTION) DESC, JURISDICTION;
